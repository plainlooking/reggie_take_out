<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luo.mybatis.mapper.DynamicSQLMapper">
    <!--    int insertMoreList(List<Emp> emp);-->
    <insert id="insertMoreList">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.sex},#{emp.email},null)
        </foreach>
    </insert>

<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--   int deleteMoreByArray(@Param("eids")Integer[] eids);-->
    <delete id="deleteMoreByArray">
        delete from t_emp where
        <foreach collection="eids" item="eid" separator="or">
            eid = #{eid}
        </foreach>
    </delete>
    <!-- 通过数组批量删除方法一
     <delete id="deleteMoreByArray">-->
    <!--        delete-->
    <!--        from t_emp-->
    <!--        where eid in-->
    <!--        <foreach collection="eids" item="eid" separator="," open="(" close=")">-->
    <!--            #{eid}-->
    <!--        </foreach>-->
    <!--    </delete>-->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--     List<Emp> Choose(Emp emp);-->
    <!--
            choose、when、otherwise`相当于`if...else if..else`
            when至少要有一个，otherwise至多只有一个
           -->
    <select id="Choose" resultType="Emp">
        select * from t_emp
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="sex != null and sex !=''">
                    sex = #{sex}
                </when>
                <when test="email != null and email != ''">
                    email = #{email}
                </when>
                <otherwise>
                    did = 1
                </otherwise>
            </choose>
        </where>
    </select>
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--    - trim用于去掉或添加标签中的内容
    - 常用属性
     - prefix：在trim标签中的内容的前面添加某些内容
       - suffix：在trim标签中的内容的后面添加某些内容
       - prefixOverrides：在trim标签中的内容的前面去掉某些内容
       - suffixOverrides：在trim标签中的内容的后面去掉某些内容
    - 若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下`select * from t_emp`-->
    <sql id="empColumns">eid,emp_name,age,sex,email</sql>
    <select id="getEmpByCondition" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp
        <trim prefix="where" suffixOverrides="and|or">
            <if test="empName != null and empName != ''">
                emp_name=#{empName} and
            </if>
            <if test="age != null and age != ''">
                age = #{age} or
            </if>
            <if test="sex != null and sex != ''">
                sex = #{sex} and
            </if>
            <if test="email != null and email != ''">
                email = #{email}
            </if>
        </trim>
    </select>

    <!--    List<Emp> getEmpByCondition(Emp emp);-->
    <!--    动态拼接sql使用where方法二
         - where和if一般结合使用：
         - 若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字
         - 若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and/or去掉
          注意：where标签不能去掉条件后多余的and/or
    -->
    <!--    <select id="getEmpByCondition" resultType="Emp">-->
    <!--        select * from t_emp-->
    <!--        <where>-->
    <!--            <if test="empName != null and empName != ''">-->
    <!--                emp_name=#{empName}-->
    <!--            </if>-->
    <!--            <if test="age != null and age != ''">-->
    <!--                and age = #{age}-->
    <!--            </if>-->
    <!--            <if test="sex != null and sex != ''">-->
    <!--                and sex = #{sex}-->
    <!--            </if>-->
    <!--            <if test="email != null and email != ''">-->
    <!--                and email = #{email}-->
    <!--            </if>-->
    <!--        </where>-->
    <!--    </select>-->

    <!--   动态拼接sql方法一
    - if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行
   - 在where后面添加一个恒成立条件`1=1`
   - 这个恒成立条件并不会影响查询的结果
   - 这个`1=1`可以用来拼接`and`语句，例如：当empName为null时
   - 如果不加上恒成立条件，则SQL语句为`select * from t_emp where and age = ? and sex = ? and email = ?`，
     此时`where`会与`and`连用，SQL语句会报错
   - 如果加上一个恒成立条件，则SQL语句为`select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?`，此时不报错

     <select id="getEmpByCondition" resultType="Emp">
            select * from t_emp where 1=1
            <if test="empName != null and empName != ''">
                emp_name=#{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
            <if test="email != null and email != ''">
                and email = #{email}
            </if>
        </select>-->

</mapper>